generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String
  password    String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  deleted_at  DateTime?
  connections connections[]
  zaps        zaps[]
}

model services {
  id                Int           @id @default(autoincrement())
  name              String        @unique
  icon_url          String?
  api_base_url      String?
  service_color     String        @default("#FFFFFF")
  auth_type         String
  documentation_url String?
  is_active         Boolean       @default(true)
  created_at        DateTime      @default(now())
  connections       connections[]
  triggers          triggers[]
  actions           actions[]
}

model connections {
  id                   Int         @unique @default(autoincrement())
  user_id              Int
  @@index([user_id])
  service_id           Int
  @@index([service_id])
  account_identifier   String
  @@index([account_identifier])

  access_token         String
  refresh_token        String?
  expires_at           DateTime?
  rate_limit_remaining Int         @default(1000)
  rate_limit_reset     DateTime?
  connection_name      String?
  scopes               String?
  is_active            Boolean     @default(true)
  created_at           DateTime    @default(now())
  last_used_at         DateTime?
  user                 users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  service              services    @relation(fields: [service_id], references: [id], onDelete: Cascade)
  dependent_steps      zap_steps[]

  @@id([id, user_id, service_id, account_identifier])
}

model http_request {
  id            Int        @id @default(autoincrement())
  description   String
  method        String     @default("GET")
  endpoint      String
  body_schema   Json
  header_schema Json
  triggers      triggers[]
  actions       actions[]
}

model webhooks {
  id               Int        @id @default(autoincrement())
  header_schema    Json
  body_schema      Json
  from_url         String
  secret           String?
  total_received   Int          @default(0)
  last_received_at DateTime?
  triggers         triggers[]
}

model triggers {
  id               Int           @id @default(autoincrement())
  service_id       Int
  class_name       String
  http_request_id  Int?
  webhook_id       Int?
  @@index([service_id])
  @@index([http_request_id])
  @@index([webhook_id])
  trigger_type     String
  name             String
  description      String
  polling_interval Int?
  fields           Json
  variables        Json
  is_active        Boolean       @default(true)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  service          services      @relation(fields: [service_id], references: [id], onDelete: Cascade)
  http_request     http_request? @relation(fields: [http_request_id], references: [id], onDelete: SetNull)
  webhook          webhooks?     @relation(fields: [webhook_id], references: [id], onDelete: SetNull)
  zap_steps        zap_steps[]
}

model actions {
  id              Int          @id @default(autoincrement())
  service_id      Int
  class_name      String
  http_request_id Int
  @@index([service_id])
  @@index([http_request_id])
  name            String
  description     String
  fields          Json
  variables       Json
  is_active       Boolean      @default(true)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  service         services     @relation(fields: [service_id], references: [id], onDelete: Cascade)
  http_request    http_request @relation(fields: [http_request_id], references: [id], onDelete: SetNull)
  zap_steps       zap_steps[]
}

model zaps {
  id              Int              @id @default(autoincrement())
  user_id         Int
  @@index([user_id])
  name            String
  description     String
  is_active       Boolean          @default(false)
  total_runs      Int              @default(0)
  successful_runs Int              @default(0)
  failed_runs     Int              @default(0)
  last_run_at     DateTime?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now())
  deleted_at      DateTime?
  user            users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  zap_steps       zap_steps[]
  zap_executions  zap_executions[]
}

model zap_steps {
  id             Int      @id @default(autoincrement())
  zap_id         Int
  @@index([zap_id])
  source_step_id Int?
  @@index([source_step_id])
  trigger_id     Int?
  @@index([trigger_id])
  action_id      Int?
  @@index([action_id])
  connection_id  Int
  @@index([connection_id])

  step_type      String
  step_order     Int
  payload        Json
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  zap                 zaps                  @relation(fields: [zap_id], references: [id], onDelete: Cascade)
  source_step         zap_steps?            @relation("zap_steps_source", fields: [source_step_id], references: [id], onDelete: SetNull)
  dependent_steps     zap_steps[]           @relation("zap_steps_source")
  trigger             triggers?             @relation(fields: [trigger_id], references: [id], onDelete: Cascade)
  action              actions?              @relation(fields: [action_id], references: [id], onDelete: Cascade)
  zap_step_executions zap_step_executions[]
  connection          connections           @relation(fields: [connection_id], references: [id])
}

model zap_executions {
  id                  Int                   @id @default(autoincrement())
  zap_id              Int
  @@index([zap_id])
  status              String
  duration_ms         Int
  started_at          DateTime
  ended_at            DateTime?
  zap                 zaps                  @relation(fields: [zap_id], references: [id], onDelete: Cascade)
  zap_step_executions zap_step_executions[]
}

model zap_step_executions {
  id               Int            @id @default(autoincrement())
  zap_step_id      Int
  zap_execution_id Int
  @@index([zap_step_id])
  @@index([zap_execution_id])
  data             Json
  status           String
  duration_ms      Int
  error            Json?
  started_at       DateTime
  ended_at         DateTime?
  zap_step         zap_steps      @relation(fields: [zap_step_id], references: [id], onDelete: Cascade)
  zap_execution    zap_executions @relation(fields: [zap_execution_id], references: [id], onDelete: Cascade)
}
