name: CI & Sync to Upstream

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -d "./front_end" ] && [ -f "./front_end/package.json" ]; then
            echo "frontend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_exists=false" >> $GITHUB_OUTPUT
            echo "Frontend directory not found, skipping frontend steps"
          fi

      - name: Install dependencies
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        run: npm install
        working-directory: ./front_end

      - name: Run lint
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        run: npm run lint
        working-directory: ./front_end

      - name: Run tests
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        run: npm test -- --ci
        working-directory: ./front_end

      - name: Check if docker-compose exists
        id: check-docker
        run: |
          if [ -f "./docker-compose.yml" ] || [ -f "./docker-compose.yaml" ]; then
            echo "docker_exists=true" >> $GITHUB_OUTPUT
          else
            echo "docker_exists=false" >> $GITHUB_OUTPUT
            echo "Docker compose file not found, skipping Docker build"
          fi

      - name: Build Docker images
        if: steps.check-docker.outputs.docker_exists == 'true'
        run: docker compose build

      # Security scan disabled for now - enabled when actual app images are added
      # - name: Security scan with Trivy
      #   if: steps.check-docker.outputs.docker_exists == 'true'
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: my-app:latest
      #     format: 'table'

  sync-upstream:
    needs: build-test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout mirror
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for proper mirroring

      - name: Push to upstream repo
        run: |
          git config user.name "Mirror Bot"
          git config user.email "mirror@example.com"
          
          # Debug: Test API access
          echo "Testing token authentication..."
          curl -s -H "Authorization: token ${{ secrets.MIRRORING2 }}" https://api.github.com/user | jq '.login' || echo "Token test failed"
          
          echo "Testing repository access..."
          curl -s -H "Authorization: token ${{ secrets.MIRRORING2 }}" https://api.github.com/repos/EpitechPGE3-2025/G-DEV-500-REN-5-1-area-3 | jq '.full_name' || echo "Repository access failed"
          
          # Try the git push
          git remote add upstream https://x-access-token:${{ secrets.MIRRORING2 }}@github.com/EpitechPGE3-2025/G-DEV-500-REN-5-1-area-3.git
          git push upstream HEAD:main